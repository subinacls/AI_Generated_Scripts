const API_BASE="https://api.github.com";chrome.runtime.onMessage.addListener(async(e,r,t)=>{if("uploadCode"===e.action){const{repoName:r}=e,n=fetchGeneratedPythonCode(),o=await getAccessToken();if(!o)return void alert("Access token not found. Please authenticate with GitHub.");try{const e=await createPrivateRepo(o,r);await uploadPythonCode(o,e,n),alert("Python code successfully uploaded!")}catch(e){console.error(e),alert("Error uploading Python code.")}}});function fetchGeneratedPythonCode(){}function getAccessToken(){}async function createPrivateRepo(e,r){const t=await fetch(`${API_BASE}/user/repos`,{method:"POST",headers:{Authorization:`token ${e}`, "Content-Type":"application/json"},body:JSON.stringify({name:r,private:!0})});if(!t.ok)throw new Error(`Error creating repo: ${t.statusText}`);return await t.json()}async function uploadPythonCode(e,r,t){const{git:{trees:o,commits:i}}=r.default_branch,n=await fetch(`${API_BASE}/repos/${r.full_name}/git/trees/${o.sha}`,{headers:{Authorization:`token ${e}`}}),a=await n.json(),c=await fetch(`${API_BASE}/repos/${r.full_name}/git/trees`,{method:"POST",headers:{Authorization:`token ${e}`, "Content-Type":"application/json"},body:JSON.stringify({base_tree:a.sha,tree:[{path:"generated_code.py",mode:"100644",type:"blob",content:t}]})}),s=await c.json(),u=await fetch(`${API_BASE}/repos/${r.full_name}/git/commits`,{method:"POST",headers:{Authorization:`token ${e}`, "Content-Type":"application/json"},body:JSON.stringify({message:"Upload generated Python code",tree:s.sha,parents:[i.sha]})}),l=await u.json();await fetch(`${API_BASE}/repos/${r.full_name}/git/refs/heads/${r.default_branch}`,{method:"PATCH",headers:{Authorization:`token ${e}`, "Content-Type":"application/json"},body:JSON.stringify({sha:l.sha})})}
